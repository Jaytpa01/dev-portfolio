---
import {
	ResourceDisplay,
	type Resource,
	type Folder,
} from "@components/Resources";
import BaseLayout from "@layouts/Base.astro";

const folders: Folder[] = [
	{
		id: "root",
		name: "Resources",
	},
	{
		id: "articles",
		name: "Articles / Blogs",
		parentFolder: "root",
	},
	{
		id: "tools",
		name: "Tools",
		parentFolder: "root",
	},
	{
		id: "graphics",
		name: "Graphics",
		parentFolder: "root",
	},
	{
		id: "security",
		name: "Security",
		parentFolder: "root",
	},
	{
		id: "git",
		name: "Git",
		parentFolder: "root",
	},
	{
		id: "learning",
		name: "Learning",
		parentFolder: "root",
	},
	{
		id: "hosting",
		name: "Hosting",
		parentFolder: "root",
	},
	{
		id: "libraries",
		name: "Libraries",
		parentFolder: "root",
	},
	{
		id: "ui",
		name: "UI",
		parentFolder: "libraries",
	},
	{
		id: "people",
		name: "People",
		parentFolder: "root",
	},
	{
		id: "frameworks",
		name: "Frameworks",
		parentFolder: "root",
	},
	{
		id: "sanitisation",
		name: "Sanitisation",
		parentFolder: "libraries",
	},
];

const resources: Resource[] = [
	{
		name: "That XOR Trick",
		href: "https://florian.github.io//xor-trick/",
		folderId: "articles",
	},
	{
		name: "The Twelve Factor App",
		href: "https://12factor.net/",
		folderId: "articles",
	},
	{
		name: "Obsidian",
		href: "https://obsidian.md/",
		folderId: "tools",
	},
	{
		name: "Pomofocus",
		href: "https://pomofocus.io/",
		folderId: "tools",
	},
	{
		name: "ntfy",
		href: "https://ntfy.sh/",
		folderId: "tools",
	},
	{
		name: "Fork",
		href: "https://fork.dev/",
		folderId: "git",
	},
	{
		name: "GitKraken",
		href: "https://www.gitkraken.com/",
		folderId: "git",
	},
	{
		name: "The Odin Project",
		href: "https://www.theodinproject.com/",
		folderId: "learning",
	},
	{
		name: "Fly.io",
		href: "https://fly.io/",
		folderId: "hosting",
	},
	{
		name: "netlify",
		href: "https://www.netlify.com/",
		folderId: "hosting",
	},
	{
		name: "DigitalOcean",
		href: "https://www.digitalocean.com/",
		folderId: "hosting",
	},
	{
		name: "shadcn/ui",
		href: "https://ui.shadcn.com/",
		folderId: "ui",
	},
	{
		name: "Mantine",
		href: "https://mantine.dev/",
		folderId: "ui",
	},
	{
		name: "OWASP Cheat Sheet",
		href: "https://cheatsheetseries.owasp.org/index.html",
		folderId: "security",
	},
	{
		name: "OWASP",
		href: "https://owasp.org/",
		folderId: "security",
	},
	{
		name: "RabbitMQ",
		href: "https://www.rabbitmq.com/",
		folderId: "tools",
	},
	{
		name: "GitHub Pages",
		href: "https://pages.github.com/",
		folderId: "hosting",
	},
	{
		name: "commitlint",
		href: "https://github.com/conventional-changelog/commitlint",
		folderId: "git",
	},
	{
		name: "RSS",
		href: "https://en.wikipedia.org/wiki/RSS",
		folderId: "articles",
	},
	{
		name: "It's Time for an RSS Revival",
		href: "https://www.wired.com/story/rss-readers-feedly-inoreader-old-reader/",
		folderId: "articles",
	},
	{
		name: "Inoreader",
		href: "https://www.inoreader.com/",
		folderId: "tools",
	},
	{
		name: "Aaron Swartz",
		href: "https://en.wikipedia.org/wiki/Aaron_Swartz",
		folderId: "people",
	},
	{
		name: "Astro",
		href: "https://astro.build/",
		folderId: "frameworks",
	},
	{
		name: "Remix",
		href: "https://remix.run/",
		folderId: "frameworks",
	},
	{
		name: "bluemonday",
		href: "https://github.com/microcosm-cc/bluemonday",
		folderId: "sanitisation",
	},
	{
		name: "DOMPurify",
		href: "https://github.com/cure53/DOMPurify",
		folderId: "sanitisation",
	},
	{
		name: "NordPass",
		href: "https://nordpass.com/",
		folderId: "security",
	},
	{
		name: "Blender - Open Source 3D Creation Software",
		href: "https://www.blender.org/",
		folderId: "graphics",
	},
	{
		name: "GIMP",
		href: "https://www.gimp.org/",
		folderId: "graphics",
	},
];

folders.sort((a, b) => a.name.localeCompare(b.name));
resources.sort((a, b) => a.name.localeCompare(b.name));

// foldersMap is used to map a folder id to it's contents
const folderMap: Record<string, Folder> = {};

// subfolderMap is to map a folder id to an array of ids, representing its subfolder
const subfolderMap: Record<string, string[]> = {};

for (const folder of folders) {
	folderMap[folder.id] = folder;

	if (!folder.parentFolder) {
		continue;
	}

	// if the parent folder has no mapped subfolders yet, create and map it here and move onto next folder
	if (!subfolderMap[folder.parentFolder]) {
		subfolderMap[folder.parentFolder] = [folder.id];
		continue;
	}

	// if parent folder already has some mappings, we just add this one to it
	subfolderMap[folder.parentFolder].push(folder.id);
}

// folderResourceMap is used to map a resource to its folder
const folderResourceMap: Record<string, Resource[]> = {};
for (const resource of resources) {
	// if folder has no mapped resources, create a mapping and add this resource, then continue to next resource
	if (!folderResourceMap[resource.folderId]) {
		folderResourceMap[resource.folderId] = [resource];
		continue;
	}

	// if folder mapping already created, add this resource to it
	folderResourceMap[resource.folderId].push(resource);
}
---

<BaseLayout>
	<div class="space-y-3 py-8 text-center">
		<h1 class="text-3xl">Jay's resources</h1>
		<h2 class="text-lg text-zinc-500">
			a series of random resources I've collected
		</h2>
	</div>

	<ResourceDisplay
		rootFolderId="root"
		{folderMap}
		{subfolderMap}
		{folderResourceMap}
		client:load
	/>
</BaseLayout>
